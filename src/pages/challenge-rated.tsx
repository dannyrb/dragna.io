import React, { useState} from 'react';
import Head from 'next/head'
// import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'

import Banner from '@/components/Banner/Banner'
import Card from '@/components/Card/Card'
import CardTitle from '@/components/CardTitle/CardTitle';
import Container from '@/components/Container/Container';
import Drawer from '@/components/Drawer/Drawer';
import EncounterCalculator from '@/lib/EncounterCalculator';
import CardBuildYourParty from '@/components/PageHome/CardBuildYourParty/CardBuildYourParty';
import CardBuildYourEncounter from '@/components/PageHome/CardBuildYourEncounter/CardBuildYourEncounter';


// const inter = Inter({ subsets: ['latin'] });
const _encounterCalculator = new EncounterCalculator();

export default function Home() {
  const [partySize, setPartySize] = useState(0);
  const [partyAverageLevel, setPartyAverageLevel] = useState(0);
  const [creatureToggle, setCreatureToggle] = useState(0);
  const [enemies, setEnemies] = useState<number[]>([]);
  const [allies, setAllies] = useState<number[]>([]);

  const isPartySelected = partySize > 0 && partyAverageLevel > 0;

  //
  const { hpLost, resourcesSpent, encounterDifficulty } = _encounterCalculator.recalculateDifficulty(partySize, partyAverageLevel, enemies, allies);

  function addCreature(challengeRating: number) {
    if (creatureToggle === 0) {
      setEnemies([...enemies, challengeRating]);
    } else {
      setAllies([...allies, challengeRating]);
    }
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main}`}>
        <Banner />

        <Container>
          <CardBuildYourParty
            isExpanded={isPartySelected}
            partySize={partySize}
            setPartySize={setPartySize}
            partyAverageLevel={partyAverageLevel}
            setPartyAverageLevel={setPartyAverageLevel}
          />

          <CardBuildYourEncounter
            addCreature={addCreature}
            creatureToggle={creatureToggle}
            setCreatureToggle={setCreatureToggle}
            enemies={enemies}
            setEnemies={setEnemies}
            allies={allies}
            setAllies={setAllies}
          />

        {/* <Drawer> */}
        {/* Card 3 - Encounter Summary */}
        <Card>
          <CardTitle>
            <h2>Encounter Summary</h2>
          </CardTitle>
          <div style={{ display: 'flex', flexDirection: 'row'}}>

          <div style={{ width: '50%'}}>
            <div style={{ margin: '1rem' }}>
              <p style={{ fontWeight: '700'}}>Difficulty</p>
              <p><DynamicText>{encounterDifficulty}</DynamicText></p>
            </div>
            <div style={{ margin: '1rem' }}>
              <p style={{ fontWeight: '700'}}>HP Loss</p>
              <p><DynamicText>{Math.round(hpLost)}</DynamicText></p>
            </div>
            <div style={{ margin: '1rem' }}>
              <p style={{ fontWeight: '700'}}>Resources Spent</p>
              <p><DynamicText>{Math.round(resourcesSpent)}</DynamicText></p>
            </div>
          </div>
          
            
            {/* Left */}
            <div style={{ width: '50%'}}>
              <div style={{ margin: '1rem' }}>
                <p style={{ fontWeight: '700'}}>Party:</p>
                <p><DynamicText>{partySize}</DynamicText> PCs at Level <DynamicText>{partyAverageLevel}</DynamicText></p>
              </div>
            </div>

          </div>
        </Card>
        </Container>

        {/* </Drawer> */}

      </main>
    </>
  )
}

type DynamicTextProps = {
  children: React.ReactNode;
}

function DynamicText({children}: DynamicTextProps) {
  return (
    <span style={{ color: 'red' }}>
      {children}
    </span>
  )
}