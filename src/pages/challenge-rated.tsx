import React, { useState} from 'react';
import Head from 'next/head'
// import { Inter } from 'next/font/google'

import Banner from '@/components/Banner/Banner'
import Container from '@/components/Container/Container';
import Drawer from '@/components/Drawer/Drawer';
import EncounterCalculator from '@/lib/EncounterCalculator';
import CardBuildYourParty from '@/components/PageHome/CardBuildYourParty/CardBuildYourParty';
import CardBuildYourEncounter from '@/components/PageHome/CardBuildYourEncounter/CardBuildYourEncounter';

import Theme from '@/layouts/Theme'
import styles from './challenge-rated.module.css';


// const inter = Inter({ subsets: ['latin'] });
const _encounterCalculator = new EncounterCalculator();

export default function Home() {
  const [partySize, setPartySize] = useState(0);
  const [partyAverageLevel, setPartyAverageLevel] = useState(0);
  const [creatureToggle, setCreatureToggle] = useState(0);
  const [enemies, setEnemies] = useState<number[]>([]);
  const [allies, setAllies] = useState<number[]>([]);
  const [isExpanded, setIsExpanded] = useState(true);

  //
  const { hpLost, resourcesSpent, encounterDifficulty } = _encounterCalculator.recalculateDifficulty(partySize, partyAverageLevel, enemies, allies);

  function addCreature(challengeRating: number) {
    if (creatureToggle === 0) {
      setEnemies([...enemies, challengeRating]);
    } else {
      setAllies([...allies, challengeRating]);
    }
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Theme>
        <main style={{ marginTop: '53px'}}>
          <div style={{ padding: '16px'}}>
          {/* <Banner /> */}

          <section>
            <Container>
              <CardBuildYourParty
                isExpanded={isExpanded}
                setIsExpanded={setIsExpanded}
                partySize={partySize}
                setPartySize={setPartySize}
                partyAverageLevel={partyAverageLevel}
                setPartyAverageLevel={setPartyAverageLevel}
              />
            </Container>
          </section>

          <section>
            <Container>
              <CardBuildYourEncounter
                addCreature={addCreature}
                creatureToggle={creatureToggle}
                setCreatureToggle={setCreatureToggle}
                enemies={enemies}
                setEnemies={setEnemies}
                allies={allies}
                setAllies={setAllies}
              />
            </Container>
          </section>


          <section>
            <Container>
              {/* <Drawer> */}
              {/* Card 3 - Encounter Summary */}
                <div>
                  <h2>Encounter Summary</h2>
                </div>
                <div style={{ display: 'flex', flexDirection: 'row'}}>

                <div style={{ width: '50%'}}>
                  <div style={{ margin: '1rem' }}>
                    <p style={{ fontWeight: '700'}}>Difficulty</p>
                    <p><DynamicText>{encounterDifficulty}</DynamicText></p>
                  </div>
                  <div style={{ margin: '1rem' }}>
                    <p style={{ fontWeight: '700'}}>HP Loss</p>
                    <p>
                      <DynamicText>{Math.round(hpLost)}</DynamicText>%
                      of the party&#39;s combined maximum hit points
                    </p>
                  </div>
                  <div style={{ margin: '1rem' }}>
                    <p style={{ fontWeight: '700'}}>Resources Spent</p>
                    <p>
                      <DynamicText>{Math.round(resourcesSpent)}</DynamicText>%
                      of the party&#39;s combined daily features and resources
                    </p>
                  </div>
                </div>
                
                  
                  {/* Left */}
                  <div style={{ width: '50%'}}>
                    <div style={{ margin: '1rem' }}>
                      <p style={{ fontWeight: '700'}}>Party:</p>
                      <p><DynamicText>{partySize}</DynamicText> PCs at Level <DynamicText>{partyAverageLevel}</DynamicText></p>
                    </div>
                  </div>

                </div>
              {/* </Drawer> */}
            </Container>
          </section>

          {/* </Drawer> */}
          </div>
        </main>
        
      </Theme>
    </>
  )
}

type DynamicTextProps = {
  children: React.ReactNode;
}

function DynamicText({children}: DynamicTextProps) {
  return (
    <span className={styles.textDynamic}>
      {children}
    </span>
  )
}